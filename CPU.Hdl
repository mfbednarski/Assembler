# Assembler
Assignment 5 (CPS 360) (Group 7)
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//1. Mux16 for ARegister
	Mux16(a=instruction , b=ALUOut, sel=instruction[15] ,out=muxA);
	
	//2. ARegister: generate the load bit first
	Not(in=instruction[15], out=notInst);
	And(a=instruction[15], b=instruction[5], out= instOut);
	Or(a=notInst, b=instOut, out=loadA);
	ARegister(in=muxA, out=AOut, out[0..14]=addressM, load=loadA);

	//3. Mux16 for ALU
	Mux16(a=AOut , b=inM , sel=instruction[12] , out=muxALU);

	//4. DRegister:generate the load bit first
	And(a=instruction[15], b=instruction[4], out=loadD);
    	DRegister(in=ALUOut ,out=DOut ,load=loadD );

	//5. ALU
	ALU(x=DOut ,y=muxALU ,
	out=ALUOut ,out=outM ,
	zx=instruction[11] ,nx=instruction[10] ,
	zy=instruction[9] ,ny=instruction[8] ,
	f=instruction[7] ,no=instruction[6] ,
	ng=ngOut ,zr=zrOut);
	
	//6. PC: generate load bit first	
	And(a= instruction[2], b=ngOut, out=f1);
	And(a= instruction[1], b=zrOut, out=f2);
	Or(a=zrOut, b=ngOut, out=zrOrNg);
	Not(in=zrOrNg, out=Nor);
	And(a=Nor, b=instruction[0], out=f3);
	Or(a=f1, b=f2, out=f4);
	Or(a=f4, b=f3, out=f);
	And(a=f, b=instruction[15], out=loadPC);
	PC(in=AOut, load=loadPC , inc=true, reset=reset ,out[0..14]=pc);	

	//7. writeM
	And(a=instruction[15], b=instruction[3], out=writeM);


}
